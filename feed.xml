<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://ccke.github.io/</id><title>格物致知</title><subtitle>chukeey,分享,技术,个人博客~</subtitle> <updated>2021-11-28T23:45:00+08:00</updated> <author> <name>chukeey</name> <uri>https://ccke.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://ccke.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://ccke.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 chukeey </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>《卓有成效的管理者》读后感</title><link href="https://ccke.github.io/posts/thoughts_on_Reading_Effective_Managers/" rel="alternate" type="text/html" title="《卓有成效的管理者》读后感" /><published>2021-11-28T22:00:00+08:00</published> <updated>2021-11-28T22:00:00+08:00</updated> <id>https://ccke.github.io/posts/thoughts_on_Reading_Effective_Managers/</id> <content src="https://ccke.github.io/posts/thoughts_on_Reading_Effective_Managers/" /> <author> <name>chukeey</name> </author> <category term="管理" /> <category term="商业" /> <summary> 1. 前言 对组织负有责任，能影响组织经营成果的人，就是管理者。管理者，就必须卓有成效。卓有成效是可以学会的！ 2. 卓有成效的管理者大纲 </summary> </entry> <entry><title>《向上管理》读后感</title><link href="https://ccke.github.io/posts/thoughts_on_Reading_Upward_Management/" rel="alternate" type="text/html" title="《向上管理》读后感" /><published>2021-09-21T15:00:00+08:00</published> <updated>2021-09-21T15:00:00+08:00</updated> <id>https://ccke.github.io/posts/thoughts_on_Reading_Upward_Management/</id> <content src="https://ccke.github.io/posts/thoughts_on_Reading_Upward_Management/" /> <author> <name>chukeey</name> </author> <category term="管理" /> <category term="个人管理" /> <summary> 1. 前言 在工作过程中，经常会被上司说到需要提高向上管理能力，同时自身也意识到如果提高了这方面的能力，工作成果也会有很大的提高。 2. 向上管理大纲 </summary> </entry> <entry><title>《影响力》读后感</title><link href="https://ccke.github.io/posts/thoughts_on_Reading_Influence/" rel="alternate" type="text/html" title="《影响力》读后感" /><published>2021-07-25T22:00:00+08:00</published> <updated>2021-07-25T22:00:00+08:00</updated> <id>https://ccke.github.io/posts/thoughts_on_Reading_Influence/</id> <content src="https://ccke.github.io/posts/thoughts_on_Reading_Influence/" /> <author> <name>chukeey</name> </author> <category term="心理学" /> <category term="影响力" /> <summary> 1. 前言 生活中总有一些需要说服他人或者希望防止落入他人说服力陷阱的场景，在这方面《影响力》这本书能给我们很好地指导。 本文主要总结下顺从他人行为背后的6大心理秘籍：互惠、承诺和一致、社会认同、喜好、权威、稀缺。 2. 互惠 给与、索取、再索取 为什么起作用？ 人类社会从互惠原理中得到了一项重大的竞争优势，由此，他们必须要保证社会成员全部被同化，遵守并信任这一原理。 如何实现？ 强加恩惠：一个人靠着硬塞给我们一些好处，就能触发我们的亏欠感 触发不平等交换：亏欠感使人感到不舒服 互惠式让步：“拒绝—后撤”术，不光刺激人们答应请求，还鼓励他们切身实践承诺，甚至叫他们自愿履行进一步的要求 如何拒绝？ 倘若别人的提议我们确实赞同，那就不妨接受它；倘若这一提议别有所图，那我们就置之不理。 3. 承诺和一致 脑子里的怪物 为什么起作用？ 人... </summary> </entry> <entry><title>go语言版十大排序算法</title><link href="https://ccke.github.io/posts/sort_algorithm/" rel="alternate" type="text/html" title="go语言版十大排序算法" /><published>2021-05-30T22:55:00+08:00</published> <updated>2021-08-08T23:11:41+08:00</updated> <id>https://ccke.github.io/posts/sort_algorithm/</id> <content src="https://ccke.github.io/posts/sort_algorithm/" /> <author> <name>chukeey</name> </author> <category term="计算机技术" /> <category term="数据结构与算法" /> <summary> 1. 前言 排序算法是最经典的算法知识，目前共有十种排序算法：冒泡排序、选择排序、插入排序、归并排序、快速排序、希尔排序、堆排序、计数排序、桶排序、基数排序。 最近刚好在学习go语言，因此想着用go语言实现这些排序算法，纯当练练手，顺便回顾下排序算法~ 2. 算法实现 2.1 冒泡排序 算法思想： 算法过程： 在未排序序列中比较相邻的元素，如果第一个比第二个小/大，就交换它们两个，将最小/大值冒泡至最右侧 从剩余未排序元素中继续过程1 重复过程2，直到所有元素均排序完毕 代码实现： // 冒泡排序：是稳定排序，复杂度：O(n2)，空间复杂度：O(1) func bubblingSort(data []int) { size := len(data) if size &amp;lt;= 1 { return } swap := ... </summary> </entry> <entry><title>Laravel的类自动加载机制</title><link href="https://ccke.github.io/posts/laravel's_autoload_mechanism/" rel="alternate" type="text/html" title="Laravel的类自动加载机制" /><published>2021-04-10T16:00:00+08:00</published> <updated>2021-08-08T23:11:41+08:00</updated> <id>https://ccke.github.io/posts/laravel's_autoload_mechanism/</id> <content src="https://ccke.github.io/posts/laravel's_autoload_mechanism/" /> <author> <name>chukeey</name> </author> <category term="计算机技术" /> <category term="php" /> <category term="laravel框架" /> <summary> 1. 背景 在PHP开发过程中，如果希望从外部引入一个class，通常会使用include和require方法，去把定义这个class的文件包含进来。 include 和 require 除了处理错误的方式不同之外，在其他方面都是相同的： require 生成一个致命错误（E_COMPILE_ERROR），在错误发生后脚本会停止执行。（推荐使用） include 生成一个警告（E_WARNING），在错误发生后脚本会继续执行。 这个在小规模开发的时候，没什么大问题；但在大型的开发项目中，这么做会产生大量的require或者include方法调用，不仅降低效率，而且使得代码难以维护，况且require_once的代价很大。 在PHP5之前，各个PHP框架如果要实现类的自动加载，一般都是按照某种约定自己实现一个遍历目录，自动加载所有符合约定规则的文件... </summary> </entry> </feed>
